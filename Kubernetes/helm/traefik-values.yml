

additionalArguments:
  # comment the line above when going to production
  # - --serversTransport.insecureSkipVerify=true
  # you will need to add an annotation to ingresses you create kubernetes.io/ingress.class traefik-external
  # otherwise it will not servce those requests
  # - --log.level=DEBUG
  # - "--entrypoints.web.proxyprotocol.insecure=true"
  # - "--entrypoints.web.proxyprotocol=true"
  # - "--entrypoints.websecure.proxyprotocol.insecure=true"
  # - "--entrypoints.websecure.proxyprotocol=true"

deployment:
  enabled: true
  # Number of pods of the deployment
  replicas: 1
  # Additional deployment annotations (e.g. for jaeger-operator sidecar injection)
  annotations: {}
  # Additional pod annotations (e.g. for mesh injection or prometheus scraping)
  # consul.hashicorp.com/connect-inject: "true",
    # consul.hashicorp.com/transparent-proxy: "true",
    # consul.hashicorp.com/transparent-proxy-exclude-inbound-ports: "8000,80,443,9000,8443",
    # consul.hashicorp.com/transparent-proxy-exclude-outbound-cidrs: "10.43.0.1/32",
  podAnnotations: {
  }
  podLabels: {
    sidecar.istio.io/inject: "true"
  }
  # Additional containers (e.g. for metric offloading sidecars)
  additionalContainers: []
  # Additional initContainers (e.g. for setting file permission as shown below)
  initContainers:
    # The "volume-permissions" init container is required if you run into permission issues.
    # Related issue: https://github.com/containous/traefik/issues/6972
    # - name: volume-permissions
    #   image: busybox:1.31.1
    #   command: ["sh", "-c", "chmod -Rv 600 /certs/*"]
    #   volumeMounts:
    #     - name: data
    #       mountPath: /certs
  # Custom pod DNS policy. Apply if `hostNetwork: true`
  # dnsPolicy: ClusterFirstWithHostNet


ingressRoute:
  dashboard:
    enabled: true

# volumes:
#   - mountPath: /data
#     name: traefik-config
#     type: configMap
# without this, ingress get stuck on initializing
# providers:
#   kubernetesCRD:
#     enabled: true
#     ingressClass: traefik
#   kubernetesIngress:
#     enabled: true
#     publishedService:
#       enabled: false

# Role Based Access Control
rbac:
  enabled: true
  namespaced: false
  serviceAccount:
    name: "traefik"

service:
  enabled: true
  type: LoadBalancer
  # Additional annotations (e.g. for cloud provider specific config)
  annotations: {}
  # Additional service labels (e.g. for filtering Service by custom labels)
  labels: {}
  # Additional entries here will be added to the service spec. Cannot contains
  # type, selector or ports entries.
  spec:
    # externalTrafficPolicy: Cluster
    loadBalancerIP: 10.0.0.80 # this should be your Metal LB IP
    # clusterIP: "2.3.4.5"
  loadBalancerSourceRanges: []
    # - 192.168.0.1/32
    # - 172.16.0.0/16
  externalIPs: []
    # - 1.2.3.4

# -- Additional volumeMounts to add to the Traefik container
additionalVolumeMounts: []
# -- For instance when using a logshipper for access logs
# - name: traefik-logs
#   mountPath: /var/log/traefik

logs:
  general:
    # -- By default, the logs use a text format (common), but you can
    # also ask for the json format in the format option
    # format: json
    # By default, the level is set to ERROR.
    # -- Alternative logging levels are DEBUG, PANIC, FATAL, ERROR, WARN, and INFO.
    level: INFO

# -- Global command arguments to be passed to all traefik's pods
globalArguments:
- "--global.checknewversion"
- "--global.sendanonymoususage=false"

# -- Environment variables to be passed to Traefik's binary from configMaps or secrets
envFrom: []
# - configMapRef:
#     name: config-map-name
# - secretRef:
#     name: secret-name


# -- nodeSelector is the simplest recommended form of node selection constraint.
nodeSelector: {}


# Set Traefik as your default Ingress Controller, according to Kubernetes 1.19+ changes.
ingressClass:
  enabled: true
  isDefaultClass: true
